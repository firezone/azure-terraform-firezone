#!/bin/bash

set -e

setHostname () {
  sudo hostnamectl set-hostname ${FQDN}
}

mountAppDisk () {
if ! grep -q "appDisk" "/etc/fstab";
then
    echo "#appDisk" >> /etc/fstab
    echo "/dev/sdc1 /data ext4 defaults,nofail 0 2" >> /etc/fstab
    sudo parted /dev/sdc --script mklabel gpt mkpart ext4part ext4 0% 100%
    sudo mkfs.ext4 /dev/sdc1
    sudo partprobe /dev/sdc1
    sudo mkdir /data
    sudo mount /dev/sdc1 /data
else
    echo "Entry in fstab exists."
fi
}

generateDockerCompose () {
cd /data
cat <<EOT >> docker-compose.yml
x-deploy: &default-deploy
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s
  update_config:
    order: start-first

version: '3.7'

services:
  caddy:
    image: caddy:2
    volumes:
      - /data/firezone/caddy:/data/caddy
    ports:
      - 80:80
      - 443:443
    command: caddy reverse-proxy --to firezone:13000 --from https://${FQDN}
    deploy:
      <<: *default-deploy

  firezone:
    image: firezone/firezone
    ports:
      - 51820:51820/udp
    volumes:
      # IMPORTANT: Persists WireGuard private key and other data. If
      # /var/firezone/private_key exists when Firezone starts, it is
      # used as the WireGuard private. Otherwise, one is generated.
      - /data/firezone/firezone:/var/firezone
    env_file:
      # This should contain a list of env vars for configuring Firezone.
      # See https://docs.firezone.dev/reference/env-vars for more info.
      - .env
    environment:
      EXTERNAL_URL: https://${FQDN}
      ADMIN_EMAIL: "${ADMIN_EMAIL}"
      DEFAULT_ADMIN_PASSWORD: "${DEFAULT_ADMIN_PASSWORD}"
      WIREGUARD_IPV4_ADDRESS: "${WIREGUARD_IPV4_ADDRESS}"
      WIREGUARD_IPV4_NETWORK: "${WIREGUARD_IPV4_NETWORK}"
      WIREGUARD_ALLOWED_IPS: "${WIREGUARD_ALLOWED_IPS}"
      WIREGUARD_DNS: "${WIREGUARD_DNS}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
    cap_add:
      # Needed for WireGuard and firewall support.
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      # Needed for masquerading and NAT.
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
    depends_on:
      - postgres
    deploy:
      <<: *default-deploy

  postgres:
    image: postgres:15
    volumes:
      - /data/firezone/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: firezone
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
    deploy:
      <<: *default-deploy
      update_config:
        order: stop-first
EOT
}

installDocker () {
  sudo -E bash -c "$(curl -fsSL https://get.docker.com)"
}

deployFirezoneContainer () {
  cd /data
  docker run --rm firezone/firezone bin/gen-env > .env # Generate Random Secrets and create .env file
  sed -i '/^EXTERNAL_URL/d' .env # Prune some vars as we are providing them via docker environment
  sed -i '/^ADMIN_EMAIL/d' .env # ""
  sed -i '/^DEFAULT_ADMIN_PASSWORD/d' .env # ""
  sed -i '/^DATABASE_PASSWORD/d' .env # ""
  docker compose up -d postgres
  sleep 10 # Wait for DB to boot
  docker compose exec postgres psql -p 5432 -U postgres -d firezone -h 127.0.0.1 -c "ALTER ROLE postgres WITH PASSWORD '${DATABASE_PASSWORD}'"
  docker compose up -d firezone caddy
  sleep 15 # Wait for App to boot
  docker compose exec firezone bin/create-or-reset-admin
}

setHostname
mountAppDisk
generateDockerCompose
installDocker
deployFirezoneContainer
